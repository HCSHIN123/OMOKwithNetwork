// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_REGAME::C_REGAME(
    ::_pbi::ConstantInitialized) {}
struct C_REGAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_REGAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_REGAMEDefaultTypeInternal() {}
  union {
    C_REGAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_REGAMEDefaultTypeInternal _C_REGAME_default_instance_;
PROTOBUF_CONSTEXPR C_EXITROOM::C_EXITROOM(
    ::_pbi::ConstantInitialized) {}
struct C_EXITROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EXITROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EXITROOMDefaultTypeInternal() {}
  union {
    C_EXITROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EXITROOMDefaultTypeInternal _C_EXITROOM_default_instance_;
PROTOBUF_CONSTEXPR C_READY::C_READY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_READYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_READYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_READYDefaultTypeInternal() {}
  union {
    C_READY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_READYDefaultTypeInternal _C_READY_default_instance_;
PROTOBUF_CONSTEXPR C_ENDGAME::C_ENDGAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENDGAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENDGAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENDGAMEDefaultTypeInternal() {}
  union {
    C_ENDGAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENDGAMEDefaultTypeInternal _C_ENDGAME_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER::C_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTERDefaultTypeInternal() {}
  union {
    C_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTERDefaultTypeInternal _C_ENTER_default_instance_;
PROTOBUF_CONSTEXPR C_MYTURN::C_MYTURN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MYTURNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MYTURNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MYTURNDefaultTypeInternal() {}
  union {
    C_MYTURN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MYTURNDefaultTypeInternal _C_MYTURN_default_instance_;
PROTOBUF_CONSTEXPR C_CREATEROOM::C_CREATEROOM(
    ::_pbi::ConstantInitialized) {}
struct C_CREATEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CREATEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CREATEROOMDefaultTypeInternal() {}
  union {
    C_CREATEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATEROOMDefaultTypeInternal _C_CREATEROOM_default_instance_;
PROTOBUF_CONSTEXPR C_ENTERLOBBY::C_ENTERLOBBY(
    ::_pbi::ConstantInitialized) {}
struct C_ENTERLOBBYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTERLOBBYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTERLOBBYDefaultTypeInternal() {}
  union {
    C_ENTERLOBBY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTERLOBBYDefaultTypeInternal _C_ENTERLOBBY_default_instance_;
PROTOBUF_CONSTEXPR S_ENDGAME::S_ENDGAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENDGAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENDGAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENDGAMEDefaultTypeInternal() {}
  union {
    S_ENDGAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENDGAMEDefaultTypeInternal _S_ENDGAME_default_instance_;
PROTOBUF_CONSTEXPR S_CREATEROOM::S_CREATEROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CREATEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CREATEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CREATEROOMDefaultTypeInternal() {}
  union {
    S_CREATEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CREATEROOMDefaultTypeInternal _S_CREATEROOM_default_instance_;
PROTOBUF_CONSTEXPR S_ENTERLOBBY::S_ENTERLOBBY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTERLOBBYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTERLOBBYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTERLOBBYDefaultTypeInternal() {}
  union {
    S_ENTERLOBBY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTERLOBBYDefaultTypeInternal _S_ENTERLOBBY_default_instance_;
PROTOBUF_CONSTEXPR S_DISCONNECT::S_DISCONNECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DISCONNECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DISCONNECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DISCONNECTDefaultTypeInternal() {}
  union {
    S_DISCONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DISCONNECTDefaultTypeInternal _S_DISCONNECT_default_instance_;
PROTOBUF_CONSTEXPR S_CONNECT::S_CONNECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CONNECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CONNECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CONNECTDefaultTypeInternal() {}
  union {
    S_CONNECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CONNECTDefaultTypeInternal _S_CONNECT_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER::S_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roominfo_)*/nullptr
  , /*decltype(_impl_.cangame_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTERDefaultTypeInternal() {}
  union {
    S_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTERDefaultTypeInternal _S_ENTER_default_instance_;
PROTOBUF_CONSTEXPR S_STARTGAME::S_STARTGAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_STARTGAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_STARTGAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_STARTGAMEDefaultTypeInternal() {}
  union {
    S_STARTGAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_STARTGAMEDefaultTypeInternal _S_STARTGAME_default_instance_;
PROTOBUF_CONSTEXPR S_ENEMYTURN::S_ENEMYTURN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENEMYTURNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENEMYTURNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENEMYTURNDefaultTypeInternal() {}
  union {
    S_ENEMYTURN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENEMYTURNDefaultTypeInternal _S_ENEMYTURN_default_instance_;
PROTOBUF_CONSTEXPR S_GAMEOVER::S_GAMEOVER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_GAMEOVERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_GAMEOVERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_GAMEOVERDefaultTypeInternal() {}
  union {
    S_GAMEOVER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_GAMEOVERDefaultTypeInternal _S_GAMEOVER_default_instance_;
PROTOBUF_CONSTEXPR S_TURNBACK::S_TURNBACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_TURNBACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_TURNBACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_TURNBACKDefaultTypeInternal() {}
  union {
    S_TURNBACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_TURNBACKDefaultTypeInternal _S_TURNBACK_default_instance_;
PROTOBUF_CONSTEXPR S_ENEMYENTER::S_ENEMYENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enter_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENEMYENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENEMYENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENEMYENTERDefaultTypeInternal() {}
  union {
    S_ENEMYENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENEMYENTERDefaultTypeInternal _S_ENEMYENTER_default_instance_;
PROTOBUF_CONSTEXPR S_ENEMYREADY::S_ENEMYREADY(
    ::_pbi::ConstantInitialized) {}
struct S_ENEMYREADYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENEMYREADYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENEMYREADYDefaultTypeInternal() {}
  union {
    S_ENEMYREADY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENEMYREADYDefaultTypeInternal _S_ENEMYREADY_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_test_2eproto[20];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const uint32_t TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_REGAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_EXITROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_READY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_READY, _impl_.ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENDGAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENDGAME, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MYTURN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MYTURN, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MYTURN, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTERLOBBY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENDGAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENDGAME, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATEROOM, _impl_.room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTERLOBBY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTERLOBBY, _impl_.rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DISCONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DISCONNECT, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CONNECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CONNECT, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CONNECT, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER, _impl_.cangame_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER, _impl_.roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STARTGAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STARTGAME, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYTURN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYTURN, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYTURN, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMEOVER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMEOVER, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMEOVER, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_GAMEOVER, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TURNBACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TURNBACK, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TURNBACK, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYENTER, _impl_.enter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENEMYREADY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_REGAME)},
  { 6, -1, -1, sizeof(::Protocol::C_EXITROOM)},
  { 12, -1, -1, sizeof(::Protocol::C_READY)},
  { 19, -1, -1, sizeof(::Protocol::C_ENDGAME)},
  { 26, -1, -1, sizeof(::Protocol::C_ENTER)},
  { 33, -1, -1, sizeof(::Protocol::C_MYTURN)},
  { 41, -1, -1, sizeof(::Protocol::C_CREATEROOM)},
  { 47, -1, -1, sizeof(::Protocol::C_ENTERLOBBY)},
  { 53, -1, -1, sizeof(::Protocol::S_ENDGAME)},
  { 60, -1, -1, sizeof(::Protocol::S_CREATEROOM)},
  { 67, -1, -1, sizeof(::Protocol::S_ENTERLOBBY)},
  { 74, -1, -1, sizeof(::Protocol::S_DISCONNECT)},
  { 81, -1, -1, sizeof(::Protocol::S_CONNECT)},
  { 89, -1, -1, sizeof(::Protocol::S_ENTER)},
  { 97, -1, -1, sizeof(::Protocol::S_STARTGAME)},
  { 104, -1, -1, sizeof(::Protocol::S_ENEMYTURN)},
  { 112, -1, -1, sizeof(::Protocol::S_GAMEOVER)},
  { 121, -1, -1, sizeof(::Protocol::S_TURNBACK)},
  { 129, -1, -1, sizeof(::Protocol::S_ENEMYENTER)},
  { 136, -1, -1, sizeof(::Protocol::S_ENEMYREADY)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_REGAME_default_instance_._instance,
  &::Protocol::_C_EXITROOM_default_instance_._instance,
  &::Protocol::_C_READY_default_instance_._instance,
  &::Protocol::_C_ENDGAME_default_instance_._instance,
  &::Protocol::_C_ENTER_default_instance_._instance,
  &::Protocol::_C_MYTURN_default_instance_._instance,
  &::Protocol::_C_CREATEROOM_default_instance_._instance,
  &::Protocol::_C_ENTERLOBBY_default_instance_._instance,
  &::Protocol::_S_ENDGAME_default_instance_._instance,
  &::Protocol::_S_CREATEROOM_default_instance_._instance,
  &::Protocol::_S_ENTERLOBBY_default_instance_._instance,
  &::Protocol::_S_DISCONNECT_default_instance_._instance,
  &::Protocol::_S_CONNECT_default_instance_._instance,
  &::Protocol::_S_ENTER_default_instance_._instance,
  &::Protocol::_S_STARTGAME_default_instance_._instance,
  &::Protocol::_S_ENEMYTURN_default_instance_._instance,
  &::Protocol::_S_GAMEOVER_default_instance_._instance,
  &::Protocol::_S_TURNBACK_default_instance_._instance,
  &::Protocol::_S_ENEMYENTER_default_instance_._instance,
  &::Protocol::_S_ENEMYREADY_default_instance_._instance,
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\010Protocol\032\nenum.proto\032\014stru"
  "ct.proto\"\n\n\010C_REGAME\"\014\n\nC_EXITROOM\"\030\n\007C_"
  "READY\022\r\n\005ready\030\001 \001(\010\"\033\n\tC_ENDGAME\022\016\n\006roo"
  "mid\030\001 \001(\005\"\031\n\007C_ENTER\022\016\n\006roomid\030\001 \001(\005\" \n\010"
  "C_MYTURN\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\016\n\014C_CREA"
  "TEROOM\"\016\n\014C_ENTERLOBBY\"\033\n\tS_ENDGAME\022\016\n\006r"
  "oomid\030\001 \001(\005\",\n\014S_CREATEROOM\022\034\n\004room\030\001 \001("
  "\0132\016.Protocol.Room\"-\n\014S_ENTERLOBBY\022\035\n\005roo"
  "ms\030\001 \003(\0132\016.Protocol.Room\"\032\n\014S_DISCONNECT"
  "\022\n\n\002id\030\001 \001(\005\":\n\tS_CONNECT\022\n\n\002id\030\001 \001(\005\022!\n"
  "\007players\030\002 \003(\0132\020.Protocol.Player\"<\n\007S_EN"
  "TER\022\017\n\007cangame\030\001 \001(\010\022 \n\010roominfo\030\002 \001(\0132\016"
  ".Protocol.Room\"3\n\013S_STARTGAME\022$\n\005color\030\001"
  " \001(\0162\025.Protocol.STONE_COLOR\"#\n\013S_ENEMYTU"
  "RN\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"G\n\nS_GAMEOVER\022\t"
  "\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022#\n\006result\030\003 \001(\0162\023.P"
  "rotocol.GAME_OVER\"\"\n\nS_TURNBACK\022\t\n\001x\030\001 \001"
  "(\005\022\t\n\001y\030\002 \001(\005\"\035\n\014S_ENEMYENTER\022\r\n\005enter\030\001"
  " \001(\010\"\016\n\014S_ENEMYREADYb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_test_2eproto_deps[2] = {
  &::descriptor_table_enum_2eproto,
  &::descriptor_table_struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_test_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_2eproto = {
    false, false, 748, descriptor_table_protodef_test_2eproto,
    "test.proto",
    &descriptor_table_test_2eproto_once, descriptor_table_test_2eproto_deps, 2, 20,
    schemas, file_default_instances, TableStruct_test_2eproto::offsets,
    file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto,
    file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_2eproto_getter() {
  return &descriptor_table_test_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace Protocol {

// ===================================================================

class C_REGAME::_Internal {
 public:
};

C_REGAME::C_REGAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_REGAME)
}
C_REGAME::C_REGAME(const C_REGAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_REGAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_REGAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_REGAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_REGAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_REGAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[0]);
}

// ===================================================================

class C_EXITROOM::_Internal {
 public:
};

C_EXITROOM::C_EXITROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_EXITROOM)
}
C_EXITROOM::C_EXITROOM(const C_EXITROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_EXITROOM* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_EXITROOM)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_EXITROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_EXITROOM::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_EXITROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[1]);
}

// ===================================================================

class C_READY::_Internal {
 public:
};

C_READY::C_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_READY)
}
C_READY::C_READY(const C_READY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_READY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ready_ = from._impl_.ready_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_READY)
}

inline void C_READY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_READY::~C_READY() {
  // @@protoc_insertion_point(destructor:Protocol.C_READY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_READY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_READY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_READY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_READY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_READY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_READY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_READY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_READY)
  return target;
}

size_t C_READY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_READY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_READY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_READY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_READY::GetClassData() const { return &_class_data_; }


void C_READY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_READY*>(&to_msg);
  auto& from = static_cast<const C_READY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_READY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ready() != 0) {
    _this->_internal_set_ready(from._internal_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_READY::CopyFrom(const C_READY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_READY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_READY::IsInitialized() const {
  return true;
}

void C_READY::InternalSwap(C_READY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ready_, other->_impl_.ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_READY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[2]);
}

// ===================================================================

class C_ENDGAME::_Internal {
 public:
};

C_ENDGAME::C_ENDGAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENDGAME)
}
C_ENDGAME::C_ENDGAME(const C_ENDGAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENDGAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENDGAME)
}

inline void C_ENDGAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENDGAME::~C_ENDGAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENDGAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENDGAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENDGAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENDGAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENDGAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENDGAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENDGAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENDGAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENDGAME)
  return target;
}

size_t C_ENDGAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENDGAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENDGAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENDGAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENDGAME::GetClassData() const { return &_class_data_; }


void C_ENDGAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENDGAME*>(&to_msg);
  auto& from = static_cast<const C_ENDGAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENDGAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENDGAME::CopyFrom(const C_ENDGAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENDGAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENDGAME::IsInitialized() const {
  return true;
}

void C_ENDGAME::InternalSwap(C_ENDGAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENDGAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[3]);
}

// ===================================================================

class C_ENTER::_Internal {
 public:
};

C_ENTER::C_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER)
}
C_ENTER::C_ENTER(const C_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER)
}

inline void C_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENTER::~C_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER)
  return target;
}

size_t C_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER::GetClassData() const { return &_class_data_; }


void C_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER*>(&to_msg);
  auto& from = static_cast<const C_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER::CopyFrom(const C_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER::IsInitialized() const {
  return true;
}

void C_ENTER::InternalSwap(C_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[4]);
}

// ===================================================================

class C_MYTURN::_Internal {
 public:
};

C_MYTURN::C_MYTURN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MYTURN)
}
C_MYTURN::C_MYTURN(const C_MYTURN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MYTURN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MYTURN)
}

inline void C_MYTURN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MYTURN::~C_MYTURN() {
  // @@protoc_insertion_point(destructor:Protocol.C_MYTURN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MYTURN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MYTURN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MYTURN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MYTURN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MYTURN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MYTURN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MYTURN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MYTURN)
  return target;
}

size_t C_MYTURN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MYTURN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MYTURN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MYTURN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MYTURN::GetClassData() const { return &_class_data_; }


void C_MYTURN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MYTURN*>(&to_msg);
  auto& from = static_cast<const C_MYTURN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MYTURN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MYTURN::CopyFrom(const C_MYTURN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MYTURN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MYTURN::IsInitialized() const {
  return true;
}

void C_MYTURN::InternalSwap(C_MYTURN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MYTURN, _impl_.y_)
      + sizeof(C_MYTURN::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(C_MYTURN, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MYTURN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[5]);
}

// ===================================================================

class C_CREATEROOM::_Internal {
 public:
};

C_CREATEROOM::C_CREATEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATEROOM)
}
C_CREATEROOM::C_CREATEROOM(const C_CREATEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_CREATEROOM* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATEROOM)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATEROOM::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_CREATEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[6]);
}

// ===================================================================

class C_ENTERLOBBY::_Internal {
 public:
};

C_ENTERLOBBY::C_ENTERLOBBY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTERLOBBY)
}
C_ENTERLOBBY::C_ENTERLOBBY(const C_ENTERLOBBY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_ENTERLOBBY* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTERLOBBY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTERLOBBY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTERLOBBY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_ENTERLOBBY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[7]);
}

// ===================================================================

class S_ENDGAME::_Internal {
 public:
};

S_ENDGAME::S_ENDGAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENDGAME)
}
S_ENDGAME::S_ENDGAME(const S_ENDGAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENDGAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENDGAME)
}

inline void S_ENDGAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENDGAME::~S_ENDGAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENDGAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENDGAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ENDGAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENDGAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENDGAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENDGAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENDGAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENDGAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENDGAME)
  return target;
}

size_t S_ENDGAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENDGAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomid = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENDGAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENDGAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENDGAME::GetClassData() const { return &_class_data_; }


void S_ENDGAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENDGAME*>(&to_msg);
  auto& from = static_cast<const S_ENDGAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENDGAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENDGAME::CopyFrom(const S_ENDGAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENDGAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENDGAME::IsInitialized() const {
  return true;
}

void S_ENDGAME::InternalSwap(S_ENDGAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENDGAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[8]);
}

// ===================================================================

class S_CREATEROOM::_Internal {
 public:
  static const ::Protocol::Room& room(const S_CREATEROOM* msg);
};

const ::Protocol::Room&
S_CREATEROOM::_Internal::room(const S_CREATEROOM* msg) {
  return *msg->_impl_.room_;
}
void S_CREATEROOM::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
S_CREATEROOM::S_CREATEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATEROOM)
}
S_CREATEROOM::S_CREATEROOM(const S_CREATEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CREATEROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::Protocol::Room(*from._impl_.room_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATEROOM)
}

inline void S_CREATEROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CREATEROOM::~S_CREATEROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATEROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CREATEROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.room_;
}

void S_CREATEROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CREATEROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATEROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATEROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Room room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CREATEROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATEROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Room room = 1;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATEROOM)
  return target;
}

size_t S_CREATEROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATEROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Room room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CREATEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CREATEROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CREATEROOM::GetClassData() const { return &_class_data_; }


void S_CREATEROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CREATEROOM*>(&to_msg);
  auto& from = static_cast<const S_CREATEROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATEROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::Protocol::Room::MergeFrom(
        from._internal_room());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CREATEROOM::CopyFrom(const S_CREATEROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATEROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATEROOM::IsInitialized() const {
  return true;
}

void S_CREATEROOM::InternalSwap(S_CREATEROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.room_, other->_impl_.room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[9]);
}

// ===================================================================

class S_ENTERLOBBY::_Internal {
 public:
};

void S_ENTERLOBBY::clear_rooms() {
  _impl_.rooms_.Clear();
}
S_ENTERLOBBY::S_ENTERLOBBY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTERLOBBY)
}
S_ENTERLOBBY::S_ENTERLOBBY(const S_ENTERLOBBY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTERLOBBY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){from._impl_.rooms_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTERLOBBY)
}

inline void S_ENTERLOBBY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTERLOBBY::~S_ENTERLOBBY() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTERLOBBY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTERLOBBY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rooms_.~RepeatedPtrField();
}

void S_ENTERLOBBY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTERLOBBY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTERLOBBY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTERLOBBY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.Room rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTERLOBBY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTERLOBBY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.Room rooms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTERLOBBY)
  return target;
}

size_t S_ENTERLOBBY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTERLOBBY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Room rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_impl_.rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTERLOBBY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTERLOBBY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTERLOBBY::GetClassData() const { return &_class_data_; }


void S_ENTERLOBBY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTERLOBBY*>(&to_msg);
  auto& from = static_cast<const S_ENTERLOBBY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTERLOBBY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rooms_.MergeFrom(from._impl_.rooms_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTERLOBBY::CopyFrom(const S_ENTERLOBBY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTERLOBBY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTERLOBBY::IsInitialized() const {
  return true;
}

void S_ENTERLOBBY::InternalSwap(S_ENTERLOBBY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTERLOBBY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[10]);
}

// ===================================================================

class S_DISCONNECT::_Internal {
 public:
};

S_DISCONNECT::S_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DISCONNECT)
}
S_DISCONNECT::S_DISCONNECT(const S_DISCONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DISCONNECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DISCONNECT)
}

inline void S_DISCONNECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DISCONNECT::~S_DISCONNECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_DISCONNECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DISCONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DISCONNECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DISCONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DISCONNECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DISCONNECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DISCONNECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DISCONNECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DISCONNECT)
  return target;
}

size_t S_DISCONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DISCONNECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DISCONNECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DISCONNECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DISCONNECT::GetClassData() const { return &_class_data_; }


void S_DISCONNECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DISCONNECT*>(&to_msg);
  auto& from = static_cast<const S_DISCONNECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DISCONNECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DISCONNECT::CopyFrom(const S_DISCONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DISCONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DISCONNECT::IsInitialized() const {
  return true;
}

void S_DISCONNECT::InternalSwap(S_DISCONNECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DISCONNECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[11]);
}

// ===================================================================

class S_CONNECT::_Internal {
 public:
};

void S_CONNECT::clear_players() {
  _impl_.players_.Clear();
}
S_CONNECT::S_CONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CONNECT)
}
S_CONNECT::S_CONNECT(const S_CONNECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CONNECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CONNECT)
}

inline void S_CONNECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CONNECT::~S_CONNECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CONNECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CONNECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_CONNECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CONNECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CONNECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CONNECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CONNECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .Protocol.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CONNECT)
  return target;
}

size_t S_CONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CONNECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CONNECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CONNECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CONNECT::GetClassData() const { return &_class_data_; }


void S_CONNECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CONNECT*>(&to_msg);
  auto& from = static_cast<const S_CONNECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CONNECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CONNECT::CopyFrom(const S_CONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CONNECT::IsInitialized() const {
  return true;
}

void S_CONNECT::InternalSwap(S_CONNECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CONNECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[12]);
}

// ===================================================================

class S_ENTER::_Internal {
 public:
  static const ::Protocol::Room& roominfo(const S_ENTER* msg);
};

const ::Protocol::Room&
S_ENTER::_Internal::roominfo(const S_ENTER* msg) {
  return *msg->_impl_.roominfo_;
}
void S_ENTER::clear_roominfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.roominfo_ != nullptr) {
    delete _impl_.roominfo_;
  }
  _impl_.roominfo_ = nullptr;
}
S_ENTER::S_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER)
}
S_ENTER::S_ENTER(const S_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfo_){nullptr}
    , decltype(_impl_.cangame_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roominfo()) {
    _this->_impl_.roominfo_ = new ::Protocol::Room(*from._impl_.roominfo_);
  }
  _this->_impl_.cangame_ = from._impl_.cangame_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER)
}

inline void S_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfo_){nullptr}
    , decltype(_impl_.cangame_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER::~S_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.roominfo_;
}

void S_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.roominfo_ != nullptr) {
    delete _impl_.roominfo_;
  }
  _impl_.roominfo_ = nullptr;
  _impl_.cangame_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool cangame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cangame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Room roominfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roominfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cangame = 1;
  if (this->_internal_cangame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cangame(), target);
  }

  // .Protocol.Room roominfo = 2;
  if (this->_internal_has_roominfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roominfo(this),
        _Internal::roominfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER)
  return target;
}

size_t S_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Room roominfo = 2;
  if (this->_internal_has_roominfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roominfo_);
  }

  // bool cangame = 1;
  if (this->_internal_cangame() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER::GetClassData() const { return &_class_data_; }


void S_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER*>(&to_msg);
  auto& from = static_cast<const S_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_roominfo()) {
    _this->_internal_mutable_roominfo()->::Protocol::Room::MergeFrom(
        from._internal_roominfo());
  }
  if (from._internal_cangame() != 0) {
    _this->_internal_set_cangame(from._internal_cangame());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER::CopyFrom(const S_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER::IsInitialized() const {
  return true;
}

void S_ENTER::InternalSwap(S_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER, _impl_.cangame_)
      + sizeof(S_ENTER::_impl_.cangame_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER, _impl_.roominfo_)>(
          reinterpret_cast<char*>(&_impl_.roominfo_),
          reinterpret_cast<char*>(&other->_impl_.roominfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[13]);
}

// ===================================================================

class S_STARTGAME::_Internal {
 public:
};

S_STARTGAME::S_STARTGAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_STARTGAME)
}
S_STARTGAME::S_STARTGAME(const S_STARTGAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_STARTGAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.color_ = from._impl_.color_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_STARTGAME)
}

inline void S_STARTGAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_STARTGAME::~S_STARTGAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_STARTGAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_STARTGAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_STARTGAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_STARTGAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_STARTGAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_STARTGAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.STONE_COLOR color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::Protocol::STONE_COLOR>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_STARTGAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_STARTGAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.STONE_COLOR color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_STARTGAME)
  return target;
}

size_t S_STARTGAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_STARTGAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.STONE_COLOR color = 1;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_STARTGAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_STARTGAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_STARTGAME::GetClassData() const { return &_class_data_; }


void S_STARTGAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_STARTGAME*>(&to_msg);
  auto& from = static_cast<const S_STARTGAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_STARTGAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_STARTGAME::CopyFrom(const S_STARTGAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_STARTGAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_STARTGAME::IsInitialized() const {
  return true;
}

void S_STARTGAME::InternalSwap(S_STARTGAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.color_, other->_impl_.color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_STARTGAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[14]);
}

// ===================================================================

class S_ENEMYTURN::_Internal {
 public:
};

S_ENEMYTURN::S_ENEMYTURN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENEMYTURN)
}
S_ENEMYTURN::S_ENEMYTURN(const S_ENEMYTURN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENEMYTURN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENEMYTURN)
}

inline void S_ENEMYTURN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENEMYTURN::~S_ENEMYTURN() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENEMYTURN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENEMYTURN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ENEMYTURN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENEMYTURN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENEMYTURN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENEMYTURN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENEMYTURN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENEMYTURN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENEMYTURN)
  return target;
}

size_t S_ENEMYTURN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENEMYTURN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENEMYTURN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENEMYTURN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENEMYTURN::GetClassData() const { return &_class_data_; }


void S_ENEMYTURN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENEMYTURN*>(&to_msg);
  auto& from = static_cast<const S_ENEMYTURN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENEMYTURN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENEMYTURN::CopyFrom(const S_ENEMYTURN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENEMYTURN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENEMYTURN::IsInitialized() const {
  return true;
}

void S_ENEMYTURN::InternalSwap(S_ENEMYTURN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENEMYTURN, _impl_.y_)
      + sizeof(S_ENEMYTURN::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(S_ENEMYTURN, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENEMYTURN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[15]);
}

// ===================================================================

class S_GAMEOVER::_Internal {
 public:
};

S_GAMEOVER::S_GAMEOVER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_GAMEOVER)
}
S_GAMEOVER::S_GAMEOVER(const S_GAMEOVER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_GAMEOVER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_GAMEOVER)
}

inline void S_GAMEOVER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_GAMEOVER::~S_GAMEOVER() {
  // @@protoc_insertion_point(destructor:Protocol.S_GAMEOVER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_GAMEOVER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_GAMEOVER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_GAMEOVER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_GAMEOVER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_GAMEOVER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.GAME_OVER result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::GAME_OVER>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_GAMEOVER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_GAMEOVER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // .Protocol.GAME_OVER result = 3;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_GAMEOVER)
  return target;
}

size_t S_GAMEOVER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_GAMEOVER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .Protocol.GAME_OVER result = 3;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_GAMEOVER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_GAMEOVER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_GAMEOVER::GetClassData() const { return &_class_data_; }


void S_GAMEOVER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_GAMEOVER*>(&to_msg);
  auto& from = static_cast<const S_GAMEOVER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_GAMEOVER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_GAMEOVER::CopyFrom(const S_GAMEOVER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_GAMEOVER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_GAMEOVER::IsInitialized() const {
  return true;
}

void S_GAMEOVER::InternalSwap(S_GAMEOVER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_GAMEOVER, _impl_.result_)
      + sizeof(S_GAMEOVER::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(S_GAMEOVER, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_GAMEOVER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[16]);
}

// ===================================================================

class S_TURNBACK::_Internal {
 public:
};

S_TURNBACK::S_TURNBACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_TURNBACK)
}
S_TURNBACK::S_TURNBACK(const S_TURNBACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_TURNBACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_TURNBACK)
}

inline void S_TURNBACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_TURNBACK::~S_TURNBACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_TURNBACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_TURNBACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TURNBACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_TURNBACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_TURNBACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TURNBACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_TURNBACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_TURNBACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_TURNBACK)
  return target;
}

size_t S_TURNBACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_TURNBACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_TURNBACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_TURNBACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_TURNBACK::GetClassData() const { return &_class_data_; }


void S_TURNBACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_TURNBACK*>(&to_msg);
  auto& from = static_cast<const S_TURNBACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_TURNBACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_TURNBACK::CopyFrom(const S_TURNBACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_TURNBACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TURNBACK::IsInitialized() const {
  return true;
}

void S_TURNBACK::InternalSwap(S_TURNBACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_TURNBACK, _impl_.y_)
      + sizeof(S_TURNBACK::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(S_TURNBACK, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TURNBACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[17]);
}

// ===================================================================

class S_ENEMYENTER::_Internal {
 public:
};

S_ENEMYENTER::S_ENEMYENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENEMYENTER)
}
S_ENEMYENTER::S_ENEMYENTER(const S_ENEMYENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENEMYENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enter_ = from._impl_.enter_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENEMYENTER)
}

inline void S_ENEMYENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enter_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENEMYENTER::~S_ENEMYENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENEMYENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENEMYENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ENEMYENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENEMYENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENEMYENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enter_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENEMYENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENEMYENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENEMYENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enter = 1;
  if (this->_internal_enter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENEMYENTER)
  return target;
}

size_t S_ENEMYENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENEMYENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enter = 1;
  if (this->_internal_enter() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENEMYENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENEMYENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENEMYENTER::GetClassData() const { return &_class_data_; }


void S_ENEMYENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENEMYENTER*>(&to_msg);
  auto& from = static_cast<const S_ENEMYENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENEMYENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enter() != 0) {
    _this->_internal_set_enter(from._internal_enter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENEMYENTER::CopyFrom(const S_ENEMYENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENEMYENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENEMYENTER::IsInitialized() const {
  return true;
}

void S_ENEMYENTER::InternalSwap(S_ENEMYENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enter_, other->_impl_.enter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENEMYENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[18]);
}

// ===================================================================

class S_ENEMYREADY::_Internal {
 public:
};

S_ENEMYREADY::S_ENEMYREADY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENEMYREADY)
}
S_ENEMYREADY::S_ENEMYREADY(const S_ENEMYREADY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_ENEMYREADY* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENEMYREADY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENEMYREADY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENEMYREADY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_ENEMYREADY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_2eproto_getter, &descriptor_table_test_2eproto_once,
      file_level_metadata_test_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_REGAME*
Arena::CreateMaybeMessage< ::Protocol::C_REGAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_REGAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_EXITROOM*
Arena::CreateMaybeMessage< ::Protocol::C_EXITROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_EXITROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_READY*
Arena::CreateMaybeMessage< ::Protocol::C_READY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_READY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENDGAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENDGAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENDGAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MYTURN*
Arena::CreateMaybeMessage< ::Protocol::C_MYTURN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MYTURN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATEROOM*
Arena::CreateMaybeMessage< ::Protocol::C_CREATEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTERLOBBY*
Arena::CreateMaybeMessage< ::Protocol::C_ENTERLOBBY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTERLOBBY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENDGAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENDGAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENDGAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATEROOM*
Arena::CreateMaybeMessage< ::Protocol::S_CREATEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTERLOBBY*
Arena::CreateMaybeMessage< ::Protocol::S_ENTERLOBBY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTERLOBBY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DISCONNECT*
Arena::CreateMaybeMessage< ::Protocol::S_DISCONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DISCONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CONNECT*
Arena::CreateMaybeMessage< ::Protocol::S_CONNECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CONNECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_STARTGAME*
Arena::CreateMaybeMessage< ::Protocol::S_STARTGAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_STARTGAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENEMYTURN*
Arena::CreateMaybeMessage< ::Protocol::S_ENEMYTURN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENEMYTURN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_GAMEOVER*
Arena::CreateMaybeMessage< ::Protocol::S_GAMEOVER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_GAMEOVER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_TURNBACK*
Arena::CreateMaybeMessage< ::Protocol::S_TURNBACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_TURNBACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENEMYENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ENEMYENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENEMYENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENEMYREADY*
Arena::CreateMaybeMessage< ::Protocol::S_ENEMYREADY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENEMYREADY >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
